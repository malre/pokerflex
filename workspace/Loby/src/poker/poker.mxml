<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/halo"
	width="780" height="560"
	creationComplete="creationComplete()" 
	enterFrame="enterFrame(event)"
	click="click(event)" mouseDown="mouseDown(event)" mouseUp="mouseUp(event)" mouseMove="mouseMove(event)" xmlns:components="components.*" xmlns:message="message.*">

	<!--<mx:Image x="0" y="0" source="@Embed('../res/BG_G_01.jpg')"/>-->
<!--	<mx:Button x="327" y="385" label="出牌" width="65" height="22" id="btnSendCards" icon="@Embed(source='../res/chupai.png')" click="sendCardsClicked(event)"/>
	<mx:Button x="400" y="385" label="放弃" width="65" height="22" id="btnDiscard" icon="@Embed(source='../res/fangqi.png')" click="discardClicked(event)"/>
	<mx:Button x="495" y="385" label="提示" width="65" height="22" id="btnHint" enabled="false"/>-->
	<fx:Style>
		@namespace components "components.*";
		@namespace mx "library://ns.adobe.com/flex/halo";
		@namespace message "message.*";
		@namespace s "library://ns.adobe.com/flex/spark";
		
		.pokerdatagridheader{
			color:#000000;
			fontsize: 12;
		}
	</fx:Style>
	<components:GameCardsCommand id="commandbar" x="295" y="350">
	</components:GameCardsCommand>
	<!--玩家头像-->
	<mx:Image x="283" y="20" width="64" height="64" id="Img_playerAvatarUp"/>
	<mx:Image x="25" y="238" width="64" height="64" id="Img_playerAvatarLeft"/>
	<mx:Image x="283" y="472" width="64" height="64" id="Img_playerAvatarDown"/>
	<mx:Image x="523" y="240" width="64" height="64" id="Img_playerAvatarRight"/>
	<!--头像上的准备提示按钮-->
 	<mx:Image x="309" y="63" id="imgPlayerUpReady" source="@Embed('../res/ready.png')"/>
	<mx:Image x="51" y="281" id="imgPlayerLeftReady" source="@Embed('../res/ready.png')"/>
	<mx:Image x="549" y="283" id="imgPlayerRightReady" source="@Embed('../res/ready.png')"/>
	<mx:Image x="309" y="515" id="imgPlayerDownReady" source="@Embed('../res/ready.png')"/>
	<mx:Image x="281" y="472" id="label_thinking" source="@Embed('../res/chupaihint.png')"/>
	<!--聊天上的按钮和选项设置等等-->
	<s:Button x="284" y="455" skinClass="components.ButtonReady" id="btnReady" click="gameReadyClicked(event)"/>
	<s:Button x="680" y="526" skinClass="components.Button_GameTalk" click="gameSendMsg_clickHandler(event)"/>
	<s:Button x="702" y="525" skinClass="components.ButtonMsgEmotion" click="chatEmotion_clickHandler(event)"/>
	<s:Button x="722" y="525" skinClass="components.ButtonMsgOption" click="chatOptionBtn_clickHandler(event)"/>
	<s:Button x="742" y="525" skinClass="components.ButtonMsgToAll" click="shoutgame_clickHandler(event)"/>
	<s:Button x="682" y="312" skinClass="components.ButtonSetup" id="btnSetting" click="btnSetting_clickHandler(event)"/>
	<s:Button x="644" y="312" skinClass="components.ButtonHelp" height="44" width="41" click="btnHelp_clickHandler(event)"/>
	<s:Button x="720" y="313" skinClass="components.ButtonExit" click="btnExit_clickHandler(event)"/>

	<!--左边的玩家的属性-->
	<s:Group id="playerinfoLeft" x="3" y="309" height="69" width="138">
	<mx:Image x="0" y="0" id="img_playerLeftBG" source="@Embed('res/playerInfoBG.png')"/>
	<mx:Label x="10" y="7" id="Lable_playernameLeft" color="#FFFFFF"/>
	<mx:Label x="10" y="25" text="等   级：" height="18" color="#FFFFFF"/>
	<mx:Label x="60" y="25" id="Lable_playerLevelLeft" color="#FFFFFF" height="18"/>
	<mx:Label x="10" y="43" text="剩余牌：" color="#FFFFFF" height="18"/>
	<mx:Label x="60" y="43" id="Label_leftcardsnumLeft" color="#FFFFFF" height="18"/>
	</s:Group>

	<!--上边的玩家的属性-->
	<s:Group id="playerinfoUp" x="134" y="8" height="69" width="138">
	<mx:Image x="0" y="0" id="img_playerUpBG" source="@Embed('res/playerInfoBG.png')"/>
	<mx:Label x="10" y="7" id="Lable_playernameUp" color="#FFFFFF" height="18"/>
	<mx:Label x="10" y="25" text="等   级：" height="18" color="#FFFFFF"/>
	<mx:Label x="60" y="25" id="Lable_playerLevelUp" height="18" color="#FFFFFF"/>
	<mx:Label x="10" y="43" color="#FFFFFF" height="18" text="剩余牌："/>
	<mx:Label x="60" y="43" id="Label_leftcardsnumUp" height="18" color="#FFFFFF"/>
	</s:Group>

	<!--右边的玩家的属性-->
	<s:Group id="playerinfoRight" x="468" y="159" height="69" width="138">
	<mx:Image x="0" y="0" id="img_playerRightBG" source="@Embed('res/playerInfoBG.png')"/>
	<mx:Label x="10" y="7" id="Lable_playernameRight" color="#FFFFFF"/>
	<mx:Label x="10" y="25" text="等   级：" color="#FFFFFF"/>
	<mx:Label x="60" y="25" height="18" color="#FFFFFF" id="Lable_playerLevelRight"/>
	<mx:Label x="10" y="43" text="剩余牌：" color="#FFFFFF"/>
	<mx:Label x="60" y="43" id="Label_leftcardsnumRight" color="#FFFFFF" height="18"/>
	</s:Group>

	<!--自己的属性-->
	<s:Group id="playerinfoDown" x="358" y="485" height="69" width="138">
	<mx:Image x="0" y="0" id="img_playerDownBG" source="@Embed('res/playerInfoBG.png')"/>
	<mx:Label x="10" y="7" id="Lable_playernameDown" color="#FFFFFF"/>
	<mx:Label x="10" y="25" text="等   级：" color="#FFFFFF"/>
	<mx:Label x="60" y="25" height="18" id="Lable_playerLevelDown" color="#FFFFFF"/>
	<mx:Label x="10" y="43" text="剩余牌：" color="#FFFFFF"/>
	<mx:Label x="60" y="43" height="18" color="#FFFFFF" id="Label_leftcardsnumDown"/>
	</s:Group>

	<mx:Button x="10" y="524" label="显示出过的牌" id="btnCardView" click="requestCardHistory()" enabled="true" visible="false"/>
	<mx:Label x="705" y="60" id="textPlayerSelf" width="56" height="24" color="#FFFFFF"/>
	<mx:Label x="650" y="186" id="textPlayerPartner" width="90" height="19" color="#FFFFFF"/>
	<mx:Label x="650" y="206" id="textPlayerEmy1" width="90" height="19" color="#FFFFFF"/>
	<mx:Label x="650" y="226" id="textPlayerEmy2" width="90" height="19" color="#FFFFFF"/>
	<!--倒计时的沙漏和数字-->
	<mx:Image x="95" y="231" id="sandglass" source="@Embed('../res/sandglass.swf')" width="16" height="28"/>
	<!--放弃-->
	<mx:Image x="232" y="134" id="imgDiscardUp" source="@Embed('../res/fangqi2.png')"/>
	<mx:Image x="119" y="274" id="imgDiscardLeft" source="@Embed('../res/fangqi2.png')"/>
	<mx:Image x="247" y="354" id="imgDiscardDown" source="@Embed('../res/fangqi2.png')"/>
	<mx:Image x="304" y="274" id="imgDiscardRight" source="@Embed('../res/fangqi2.png')"/>

	<mx:Label x="260" y="77" width="45" fontWeight="bold" textAlign="left" id="label_leftTimeCounter" color="#FFFFFF"/>
	<!--玩家聊天部分的框体-->
	<s:TextArea x="578" y="388" width="182" height="133" color="#FFFFFF" baseColor="#f6edae" id="gamechatbox" creationComplete="gamechatbox_creationCompleteHandler(event)" contentBackgroundAlpha="0"/>
	<message:chatSetting x="603" y="493" id="chatsetting" visible="false"/>
	<message:chatEmotion x="520" y="380" id="chatemotion" visible="false" creationComplete="chatemotion_creationCompleteHandler(event)"/>
	<!--玩家右上部分的信息-->
	<mx:Image x="651" y="41" width="51" height="46" id="selfAvatar"/>
	<mx:Label x="721" y="94" color="#FFFFFF" id="textPlayerSelf_score" height="18"/>
	<mx:Label x="721" y="109" color="#FFFFFF" id="textPlayerSelf_level" height="18"/>
	<mx:Label x="721" y="124" color="#FFFFFF" id="textPlayerSelf_gold" height="18"/>
	<!--公告-->
	<message:announceWnd id="gameAnnounce" x="50" y="66" visible="false"/>
	<!--设置窗口-->
	<components:OptionWindow x="254" y="145" id="optionWindow" currentState="State1" visible="false"/>
	<mx:DataGrid x="646" y="176" width="110" height="100" editable="false" horizontalScrollPolicy="on" baseColor="#f6edae" alternatingItemColors="[#114734, #083025]"
		headerStyleName="pokerdatagridheader">
		<mx:columns>
			<mx:DataGridColumn headerText="用户" dataField="col1" color="#FFFFFF"/>
			<mx:DataGridColumn headerText="金币" width="80" dataField="col2" color="#FFFFFF"/>
			<mx:DataGridColumn headerText="级别" width="100" dataField="col3" color="#FFFFFF"/>
			<mx:DataGridColumn headerText="积分" dataField="col4" color="#FFFFFF"/><!--backgroundColor="#0B4046" -->
		</mx:columns>
	</mx:DataGrid>
  
    <fx:Script>
    	<![CDATA[
			import flashx.textLayout.elements.TextFlow;
    		import mx.events.FlexEvent;
			import message.inputEditManager;
    		import message.ContentViewer;
    		import mx.core.UIComponent;
    		import mx.rpc.events.ResultEvent;
    		import mx.rpc.events.FaultEvent;
    		import mx.managers.PopUpManager;
    		import mx.controls.Alert;
			import poker.gamestate.StateGetTableSetting;
    		protected var createOver:Boolean = false;
			protected var inGame:Boolean = false;
			private var ui1:UIComponent = new UIComponent();
			public var inputboxGame:ContentViewer = new ContentViewer();

			private function enterGame(event:Event):void
			{
				//Game.Instance.init();
				inGame = true;
				//
				Label_leftcardsnumRight.visible = false;
				Label_leftcardsnumUp.visible = false;
				Label_leftcardsnumLeft.visible = false;
				// 放弃图
				imgDiscardDown.visible = false;
				imgDiscardLeft.visible = false;
				imgDiscardUp.visible = false;
				imgDiscardRight.visible = false;
				//
				label_thinking.visible = false;
			}
			
			private function exitGame(event:Event):void
			{
				GameObjectManager.Instance.shutdown();
				inGame = false;
				// 
				Label_leftcardsnumRight.visible = false;
				Label_leftcardsnumUp.visible = false;
				Label_leftcardsnumLeft.visible = false;
			}
			
			private function requestCardHistory():void
			{
				NetManager.Instance.send(NetManager.send_itemGetPlayedCards);
			}
			private function startDebugClicked(event:Event):void
			{
				var popup:CardViewer = CardViewer(PopUpManager.createPopUp(this, CardViewer, true));
				// 增加一个键盘监听事件
				//this.addEventListener(KeyboardEvent.KEY_DOWN, keydown);
				
			}

			// 准备界面时，准备完成点击用按钮
			private function gameReadyClicked(event:Event):void
			{
				// 发送准备好的消息，如果失败，将会自动重发，
				NetManager.Instance.send(NetManager.send_iamReady);
				btnReady.enabled = false;
				// 点击准备按钮以后，消去这个按钮，然后显示玩家的头像在座位上
			}
			
			private function btnContinueClicked(event:Event):void
			{
			}

			//public var loadedSM:SystemManager;
			public function creationComplete():void
			{
				createOver = true;
				ui1.addChild(inputboxGame.createInputbox(579, 527, 100, 15, 1));	// view part   
			}
			
			public function startup(obj:Object):void
			{
				initGUI();
				this.visible = true;
				this.addElement(ui1);
				// 把得到的返回数据复制给本游戏的处理返回的result对象
				NetManager.Instance.json1 = obj;
				NetManager.Instance.requestSuccess = true;
				Game.Instance.getSelfseat(obj);
				//
				Label_leftcardsnumRight.visible = false;
				Label_leftcardsnumUp.visible = false;
				Label_leftcardsnumLeft.visible = false;
				// 放弃图
				imgDiscardDown.visible = false;
				imgDiscardLeft.visible = false;
				imgDiscardUp.visible = false;
				imgDiscardRight.visible = false;
				//
				label_thinking.visible = false;
				sandglass.visible = false;
				label_leftTimeCounter.visible = false;
				inGame = true;
				Game.Instance.gameState = 3;	// 3 发送举手消息以前
				// 关闭几个和出牌有关的按钮的显示
				btnReady.visible = true;
				btnReady.enabled = true;
				commandbar.visible = false;
				// 初始化玩家的准备用按钮
				Game.Instance.readyStateInit();
			}
			public function endup():void
			{
				this.visible = false;
				//
				Label_leftcardsnumRight.visible = false;
				Label_leftcardsnumUp.visible = false;
				Label_leftcardsnumLeft.visible = false;
				// 放弃图
				imgDiscardDown.visible = false;
				imgDiscardLeft.visible = false;
				imgDiscardUp.visible = false;
				imgDiscardRight.visible = false;
				//
				label_thinking.visible = false;
				sandglass.visible = false;
				label_leftTimeCounter.visible = false;
				inGame = false;
				Game.Instance.gameState = 0;	// null
				// 关闭几个和出牌有关的按钮的显示
				btnReady.visible = true;
				btnReady.enabled = true;
				commandbar.visible = false;
				// 初始化玩家的准备用按钮
				Game.Instance.readyStateInit();
				GameObjectManager.Instance.shutdown();
				// 背景还是要保留
				GameObjectManager.Instance.setVisibleByName("BG", true);
				Game.Instance.clearPlayerCards();
				initGUI();
			}
			public function initGUI():void
			{
				commandbar.visible = false;
				btnReady.visible = false;
				label_thinking.visible = false;
				sandglass.visible = false;
				label_leftTimeCounter.visible = false;
				imgPlayerUpReady.visible = false;
				imgDiscardUp.visible = false;
				imgDiscardLeft.visible = false;
				imgPlayerLeftReady.visible = false;
				imgDiscardDown.visible = false;
				imgDiscardRight.visible = false;
				imgPlayerRightReady.visible = false;
				btnCardView.visible = false;
				Lable_playernameUp.text = "";
				Label_leftcardsnumUp.text = "";
				Lable_playernameLeft.text = "";
				Label_leftcardsnumLeft.text = "";
				Lable_playernameRight.text = "";
				Label_leftcardsnumRight.text = "";
				Lable_playernameDown.text = "";
				Label_leftcardsnumDown.text = "";
				// 玩家头像和准备图
				Img_playerAvatarUp.visible = false;
				Img_playerAvatarLeft.visible = false;
				Img_playerAvatarDown.visible = false;
				Img_playerAvatarRight.visible = false;
				imgPlayerUpReady.visible = false;
				imgPlayerLeftReady.visible = false;
				imgPlayerRightReady.visible = false;
				imgPlayerDownReady.visible = false;
				// 玩家信息框部分
				playerinfoUp.visible = false;
				playerinfoLeft.visible = false;
				playerinfoDown.visible = false;
				playerinfoRight.visible = false;
				textPlayerSelf.text = "";
				textPlayerPartner.text = "";
				textPlayerEmy1.text = "";
				textPlayerEmy2.text = "";
				//
				Lable_playerLevelDown.text = "";
				Lable_playerLevelUp.text = "";
				Lable_playerLevelLeft.text = "";
				Lable_playerLevelRight.text = "";
			}
			
			public function enterFrame(event:Event):void
			{
				if(!createOver)
					return ;
	    		// 逻辑部分的循环
	    		Game.Instance.taskLoop(currentState);
		    	if (inGame)
		    	{
		    		// 描画部分的循环
		    		graphics.clear();
		    		graphics.beginBitmapFill(GameObjectManager.Instance.backBuffer, null, false, false);
		    		graphics.drawRect(0, 0, this.width, this.height);
		    		graphics.endFill();
		    	}
			}
			
			public function click(event:MouseEvent):void
			{
				Game.Instance.click(event);
			}
			
			public function mouseDown(even:MouseEvent):void
			{
			
			}
			
			public function mouseUp(event:MouseEvent):void
			{
			
			}
			
			public function mouseMove(event:MouseEvent):void
			{
				
			}
			// 被调用函数
			public function showPopupDlg(data:Object):void
			{
				var popup:GameEndPopup = GameEndPopup(PopUpManager.createPopUp(this, GameEndPopup, true));
				popup.setData(data);
				popup.visible = false;
			}
			public function showCardViewer(data:Object):void
			{
			}

    		protected function btnHelp_clickHandler(event:MouseEvent):void
    		{
    		}
    		
    		protected function btnSetting_clickHandler(event:MouseEvent):void
    		{
				if(StateGetTableSetting.Instance.getSettingSuccess)
				{
					StateGetTableSetting.Instance.setData(StateGetTableSetting.Instance.lastSuccData);
				}
				else
					NetManager.Instance.send(NetManager.send_getTableSetting);
    		}
    		
    		protected function btnExit_clickHandler(event:MouseEvent):void
    		{
    			NetManager.Instance.send(NetManager.send_leave);
    		}


    		protected function gameSendMsg_clickHandler(event:MouseEvent):void
    		{
    			inputEditManager(inputboxGame.textinput.interactionManager).sendButtonPressed();
    		}


    		protected function chatOptionBtn_clickHandler(event:MouseEvent):void
    		{
    			chatsetting.visible = !chatsetting.visible;
    		}

    		protected function shoutgame_clickHandler(event:MouseEvent):void
    		{
    			inputEditManager(inputboxGame.textinput.interactionManager).shoutButtonPress();
    		}


    		protected function chatEmotion_clickHandler(event:MouseEvent):void
    		{
    			chatemotion.visible = !chatemotion.visible;
    		}


    		protected function chatemotion_creationCompleteHandler(event:FlexEvent):void
    		{
    			chatemotion.setType(1);
    		}


			protected function gamechatbox_creationCompleteHandler(event:FlexEvent):void
			{
				gamechatbox.textFlow = new TextFlow();
			}

    	]]>
    </fx:Script>
</mx:Canvas>
