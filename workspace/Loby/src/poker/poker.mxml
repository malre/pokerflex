<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/halo"
	xmlns:components="components.*" xmlns:message="message.*"
	width="780" height="560"
	creationComplete="creationComplete()" 
	enterFrame="enterFrame(event)"
	click="click(event)" mouseDown="mouseDown(event)" mouseUp="mouseUp(event)" mouseMove="mouseMove(event)">

	<fx:Style>
		@namespace components "components.*";
		@namespace mx "library://ns.adobe.com/flex/halo";
		@namespace message "message.*";
		@namespace s "library://ns.adobe.com/flex/spark";
		
		.pokerdatagridheader{
			color:#000000;
			fontsize: 12;
		}
	</fx:Style>
	<!--<mx:SWFLoader id="BGswf" source="@Embed('assets/gameBG.swf')" autoLoad="true"/>-->
	<s:Group>
		<s:BitmapImage x="0" y="0" width="780" height="560" source="@Embed('res/BG.png')"/>

	</s:Group>
	<!--玩家打出的牌的层-->
	<s:Group id="gamePlayedcardLayerDown">
	</s:Group>
	<!--玩家自己的牌的层-->
	<s:Group id="gamecardLayerDown">
	</s:Group>
	<!--上家牌堆和手牌层-->
	<s:Group id="gamecardLayerUp">
	</s:Group>
	<!--上家打出的牌的层-->
	<s:Group id="gamePlayedcardLayerUp">
	</s:Group>
	<!--左边牌堆和手牌层-->
	<s:Group id="gamecardLayerLeft">
	</s:Group>
	<!--左边打出的牌的层-->
	<s:Group id="gamePlayedcardLayerLeft">
	</s:Group>
	<!--右边牌堆和手牌层-->
	<s:Group id="gamecardLayerRight">
	</s:Group>
	<!--右边打出的牌的层-->
	<s:Group id="gamePlayedcardLayerRight">
	</s:Group>
	
	<components:GameCardsCommand id="commandbar" x="270" y="350">
	</components:GameCardsCommand>
	<!--算牌器-->
	<s:Button x="7" y="524" id="btnCardView" click="requestCardHistory()" skinClass="components.Button_calcCards" enabled="true" visible="true"/>
	<s:Button x="7" y="493" id="cupAI" click="cupAI_clickHandler(event)" skinClass="components.Button_CpuPlay" visible="false"/>
	<!--玩家头像-->
	<s:Group x="238" y="10" width="48" height="48" id="avatarUpGroup" creationComplete="avatarUpGroup_creationCompleteHandler(event)">
		<mx:Image width="48" height="48" id="Img_playerAvatarUp"/>
	</s:Group>
	<s:Group x="12" y="211" width="48" height="48" id="avatarLeftGroup" creationComplete="avatarUpGroup_creationCompleteHandler(event)">
		<mx:Image width="48" height="48" id="Img_playerAvatarLeft"/>
	</s:Group>
	<s:Group x="240" y="489" width="48" height="48" id="avatarDownGroup" creationComplete="avatarUpGroup_creationCompleteHandler(event)">
		<mx:Image width="48" height="48" id="Img_playerAvatarDown"/>
	</s:Group>
	<s:Group x="467" y="211" width="48" height="48" id="avatarRightGroup" creationComplete="avatarUpGroup_creationCompleteHandler(event)">
		<mx:Image width="48" height="48" id="Img_playerAvatarRight"/>
	</s:Group>
	<!--头像上的准备提示图片-->
 	<mx:Image x="222" y="98" id="imgPlayerUpReady" source="@Embed('../res/ready.swf')"/>
	<mx:Image x="73" y="200" id="imgPlayerLeftReady" source="@Embed('../res/ready.swf')"/>
	<mx:Image x="303" y="266" id="imgPlayerRightReady" source="@Embed('../res/ready.swf')"/>
	<mx:Image x="223" y="419" id="imgPlayerDownReady" source="@Embed('../res/ready.swf')"/>
	<mx:Image x="281" y="472" id="label_thinking" source="@Embed('../res/chupaihint.png')"/>
	<!--玩家聊天部分的框体-->
	<s:TextArea x="547" y="291" width="223" height="236" color="#FFFFFF" baseColor="#f6edae" id="gamechatbox" editable="false" contentBackgroundAlpha="0"/>
	<s:TextArea x="543" y="536" width="143" height="18" color="#FFFFFF" id="gameinputbox" editable="true" keyDown="gameinputbox_keyDownHandler(event)" contentBackgroundAlpha="0" maxChars="60" focusEnabled="false"/>
	<!--聊天上的按钮和选项设置等等-->
	<s:Button x="235" y="456" skinClass="components.ButtonReady" id="btnReady" click="gameReadyClicked(event)" toolTip="准备游戏"/>
	<s:Button x="684" y="535" skinClass="components.Button_GameTalk" id="btnTalk" click="gameSendMsg_clickHandler(event)" toolTip="发送聊天对话"/>
	<s:Button x="710" y="535" skinClass="components.ButtonMsgEmotion" id="btnEmotion" click="chatEmotion_clickHandler(event)" toolTip="表情"/>
	<s:Button x="755" y="535" skinClass="components.ButtonMsgOption" id="btnChatSetting" click="chatOptionBtn_clickHandler(event)" toolTip="聊天设置"/>
	<s:Button x="732" y="535" skinClass="components.ButtonMsgToAll" id="btnShout" click="shoutgame_clickHandler(event)" toolTip="小喇叭"/>
	<s:Button x="680" y="244" skinClass="components.ButtonSetup" id="btnSetting" click="btnSetting_clickHandler(event)" toolTip="游戏设置"/>
	<s:Button x="629" y="243" skinClass="components.ButtonHelp" id="btnFriends" height="44" width="41" click="btnHelp_clickHandler(event)" toolTip="邀请好友加入游戏"/>
	<s:Button x="730" y="244" skinClass="components.ButtonExit" id="btnExit" click="btnExit_clickHandler(event)" toolTip="返回游戏大厅"/>
	<!--桌面上的房间位置和桌号显示-->
	<s:Label x="12" y="15" width="82" height="25" fontSize="16" fontWeight="normal" id="label_tableName" color="#ffffff" textAlign="center"/>

	<!--左边的玩家的属性-->
	<s:Group id="playerinfoLeft" x="4" y="128" height="69" width="138">
	<mx:Image x="0" y="0" id="img_playerLeftBG" source="@Embed('res/playerInfoBG.swf')"/>
	<mx:Label x="3" y="4" id="Lable_playernameLeft" color="#FFFFFF"/>
	<mx:Label x="3" y="22" text="等   级：" height="18" color="#FFFFFF"/>
	<mx:Label x="46" y="22" id="Lable_playerLevelLeft" color="#FFFFFF" height="18"/>
	<mx:Label x="3" y="39" text="剩余牌：" color="#FFFFFF" height="18"/>
	<mx:Label x="46" y="39" id="Label_leftcardsnumLeft" color="#FFFFFF" height="18"/>
	</s:Group>

	<!--上边的玩家的属性-->
	<s:Group id="playerinfoUp" x="137" y="9" height="69" width="138">
	<mx:Image x="0" y="0" id="img_playerUpBG" source="@Embed('res/playerInfoBG.swf')"/>
	<mx:Label x="3" y="4" id="Lable_playernameUp" color="#FFFFFF" height="18"/>
	<mx:Label x="3" y="22" text="等   级：" height="18" color="#FFFFFF"/>
	<mx:Label x="46" y="22" id="Lable_playerLevelUp" height="18" color="#FFFFFF"/>
	<mx:Label x="3" y="39" color="#FFFFFF" height="18" text="剩余牌："/>
	<mx:Label x="46" y="39" id="Label_leftcardsnumUp" height="18" color="#FFFFFF"/>
	</s:Group>

	<!--右边的玩家的属性-->
	<s:Group id="playerinfoRight" x="449" y="130" height="69" width="138">
	<mx:Image x="0" y="0" id="img_playerRightBG" source="@Embed('res/playerInfoBG.swf')"/>
	<mx:Label x="3" y="4" id="Lable_playernameRight" color="#FFFFFF"/>
	<mx:Label x="3" y="22" text="等   级：" color="#FFFFFF"/>
	<mx:Label x="46" y="22" height="18" color="#FFFFFF" id="Lable_playerLevelRight"/>
	<mx:Label x="3" y="39" text="剩余牌：" color="#FFFFFF"/>
	<mx:Label x="46" y="39" id="Label_leftcardsnumRight" color="#FFFFFF" height="18"/>
	</s:Group>

	<!--自己的属性-->
	<s:Group id="playerinfoDown" x="121" y="474" height="69" width="138">
	<mx:Image x="0" y="0" id="img_playerDownBG" source="@Embed('res/playerInfoBG.swf')"/>
	<mx:Label x="3" y="4" id="Lable_playernameDown" color="#FFFFFF"/>
	<mx:Label x="3" y="22" text="等   级：" color="#FFFFFF"/>
	<mx:Label x="46" y="22" height="18" id="Lable_playerLevelDown" color="#FFFFFF"/>
	<mx:Label x="3" y="39" text="剩余牌：" color="#FFFFFF"/>
	<mx:Label x="46" y="39" height="18" color="#FFFFFF" id="Label_leftcardsnumDown"/>
	</s:Group>
	<!--玩家右上部分的信息-->
	<mx:Image x="553" y="41" width="45" height="45" id="selfAvatar"/>
	<mx:Label x="655" y="36" id="textPlayerSelf" width="100" height="22" color="#000000"/>
	<mx:Label x="655" y="60" color="#000000" id="textPlayerSelf_score" height="18" width="94"/>
	<mx:Label x="655" y="81" color="#000000" id="textPlayerSelf_level" height="18" width="94"/>
	<mx:Label x="655" y="101" color="#000000" id="textPlayerSelf_gold" height="18" width="94"/>
	<!--倒计时的沙漏和数字-->
	<mx:Image x="95" y="231" id="sandglass" source="@Embed('../res/sandglass.swf')" width="16" height="28"/>
	<!--放弃-->
	<mx:Image x="193" y="128" id="imgDiscardUp" source="@Embed('../res/pass.swf')"/>
	<mx:Image x="85" y="245" id="imgDiscardLeft" source="@Embed('../res/pass.swf')"/>
	<mx:Image x="200" y="338" id="imgDiscardDown" source="@Embed('../res/pass.swf')"/>
	<mx:Image x="298" y="246" id="imgDiscardRight" source="@Embed('../res/pass.swf')"/>
	<!--托管显示图-->
	<mx:Image x="235" y="419" id="cpuAIAnimation" source="@Embed('assets/CPUAI.swf')" visible="false"/>

	<mx:Label x="260" y="81" width="26" fontWeight="bold" textAlign="left" id="label_leftTimeCounter" color="#000000"/>
	<!--玩家聊天部分的设置和表情-->
	<message:chatSetting x="608" y="496" id="chatsetting" visible="false"/>
	<message:chatEmotion x="618" y="382" id="gameEmotion" visible="false"/>
	<!--其他玩家的信息，本来是用datagrid，改成全部文本-->
	<s:Group id="otherPlayerlist" x="548" y="160" width="222" height="69">
		<s:Label x="0" y="3" id="label_pl_up_name" text="up_name" width="81" color="#000000" lineBreak="explicit"/>
		<s:Label x="0" y="25" id="label_pl_left_name" text="left_name" width="81" color="#000000" lineBreak="explicit"/>
		<s:Label x="0" y="47" id="label_pl_right_name" text="right_name" width="81" color="#000000" lineBreak="explicit"/>
		<s:Label x="85" y="3" id="label_pl_up_score" text="upscr" color="#000000" width="40" lineBreak="explicit"/>
		<s:Label x="85" y="25" id="label_pl_left_score" text="lefscr" color="#000000" width="40" lineBreak="explicit"/>
		<s:Label x="85" y="47" id="label_pl_right_score" text="rgscr" color="#000000" width="40" lineBreak="explicit"/>
		<s:Label x="127" y="3" id="label_pl_up_level" text="uplv" color="#000000" width="42" lineBreak="explicit"/>
		<s:Label x="127" y="25" id="label_pl_left_level" text="leflv" color="#000000" width="42" lineBreak="explicit"/>
		<s:Label x="127" y="47" id="label_pl_right_level" text="rglv" color="#000000" width="42" lineBreak="explicit"/>
		<s:Label x="173" y="3" id="label_pl_up_gold" text="upgold" color="#000000" width="46" lineBreak="explicit"/>
		<s:Label x="173" y="25" id="label_pl_left_gold" text="lfgold" color="#000000" width="46" lineBreak="explicit"/>
		<s:Label x="173" y="47" id="label_pl_right_gold" text="rggold" color="#000000" width="46" lineBreak="explicit"/>
	</s:Group>
	<!--设置窗口-->
	<components:OptionWindow x="254" y="145" id="optionWindow" currentState="State1" visible="false"/>

	<fx:Script>
    	<![CDATA[
			import lobystate.StateGetFriends;
			import lobystate.StateGetTableSettingFromLobby;
			import lobystate.StateLobyJoinTable;
			
			import message.*;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import poker.gamestate.StateUpdateWhileGame;

			protected var createOver:Boolean = false;
			protected var inGame:Boolean = false;
			public var inputboxGame:ContentViewer = new ContentViewer();

			private function enterGame(event:Event):void
			{
				//Game.Instance.init();
				inGame = true;
				//
				Label_leftcardsnumRight.visible = false;
				Label_leftcardsnumUp.visible = false;
				Label_leftcardsnumLeft.visible = false;
				// 放弃图
				imgDiscardDown.visible = false;
				imgDiscardLeft.visible = false;
				imgDiscardUp.visible = false;
				imgDiscardRight.visible = false;
				//
				label_thinking.visible = false;
			}
			
			private function exitGame(event:Event):void
			{
				GameObjectManager.Instance.shutdown();
				inGame = false;
				// 
				Label_leftcardsnumRight.visible = false;
				Label_leftcardsnumUp.visible = false;
				Label_leftcardsnumLeft.visible = false;
			}
			
			private function requestCardHistory():void
			{
				NetManager.Instance.send(NetManager.send_itemGetPlayedCards);
			}
			private function startDebugClicked(event:Event):void
			{
				var popup:GameEndPopup = GameEndPopup(PopUpManager.createPopUp(this, GameEndPopup, true));
				// 增加一个键盘监听事件
				//this.addEventListener(KeyboardEvent.KEY_DOWN, keydown);
				
			}

			// 准备界面时，准备完成点击用按钮
			private function gameReadyClicked(event:Event):void
			{
				// 发送准备好的消息，如果失败，将会自动重发，
				NetManager.Instance.send(NetManager.send_iamReady);
				btnReady.enabled = false;
				// 点击准备按钮以后，消去这个按钮，然后显示玩家的头像在座位上
			}
			
			private function btnContinueClicked(event:Event):void
			{
			}

			public function creationComplete():void
			{
				createOver = true;
			}
			
			
			public function startup(obj:Object):void
			{
				// 把得到的返回数据复制给本游戏的处理返回的result对象
				NetManager.Instance.json1 = obj;
				NetManager.Instance.requestSuccess = true;
				Game.Instance.getSelfseat(obj);

//				this.visible = true;
				initGUI();
				Game.Instance.gameState = 1;
//				this.alpha = 0;
			}
			
			public function _startup():void
			{
				this.visible = true;
				//
				btnTalk.visible = true;
				btnEmotion.visible = true;
				btnChatSetting.visible = true;
				btnShout.visible = true;
				btnSetting.visible = true;
				btnExit.visible = true;
				btnFriends.visible = true;
				//
//				gameplayerlist.visible = true;

				//
				Label_leftcardsnumRight.visible = false;
				Label_leftcardsnumUp.visible = false;
				Label_leftcardsnumLeft.visible = false;
				// 放弃图
				imgDiscardDown.visible = false;
				imgDiscardLeft.visible = false;
				imgDiscardUp.visible = false;
				imgDiscardRight.visible = false;
				//
				label_thinking.visible = false;
				sandglass.visible = false;
				label_leftTimeCounter.visible = false;
				inGame = true;
				Game.Instance.gameState = 3;	// 3 发送举手消息以前
				// 关闭几个和出牌有关的按钮的显示
				btnReady.visible = true;
				btnReady.enabled = true;
				commandbar.visible = false;
				// 初始化玩家的准备用按钮
				Game.Instance.readyStateInit();
				// 描画桌子编号
				label_tableName.text = StateGetTableSettingFromLobby.Instance.lastSuccData.name;
			}
			public function endup():void
			{
				this.visible = false;
				//
				Label_leftcardsnumRight.visible = false;
				Label_leftcardsnumUp.visible = false;
				Label_leftcardsnumLeft.visible = false;
				// 放弃图
				imgDiscardDown.visible = false;
				imgDiscardLeft.visible = false;
				imgDiscardUp.visible = false;
				imgDiscardRight.visible = false;
				//
				label_thinking.visible = false;
				sandglass.visible = false;
				label_leftTimeCounter.visible = false;
				inGame = false;
				Game.Instance.gameState = 0;	// null
				// 关闭几个和出牌有关的按钮的显示
				btnReady.visible = true;
				btnReady.enabled = true;
				commandbar.visible = false;
				// 初始化玩家的准备用按钮
				Game.Instance.readyStateInit();
				GameObjectManager.Instance.removeCardfromScreen("PlayedCardSelf");
				GameObjectManager.Instance.removeCardfromScreen("PlayedCardUp");
				GameObjectManager.Instance.removeCardfromScreen("PlayedCardLeft");
				GameObjectManager.Instance.removeCardfromScreen("PlayedCardRight");
				GameObjectManager.Instance.removeCardfromScreen("HandCardUp");
				GameObjectManager.Instance.removeCardfromScreen("HandCardLeft");
				GameObjectManager.Instance.removeCardfromScreen("HandCardRight");
				// 背景还是要保留
				GameObjectManager.Instance.setVisibleByName("BG", true);
				Game.Instance.clearPlayerCards();
				initGUI();
			}
			public function initGUI():void
			{
				commandbar.visible = false;
				btnReady.visible = false;
				label_thinking.visible = false;
				sandglass.visible = false;
				label_leftTimeCounter.visible = false;
				imgPlayerUpReady.visible = false;
				imgDiscardUp.visible = false;
				imgDiscardLeft.visible = false;
				imgPlayerLeftReady.visible = false;
				imgDiscardDown.visible = false;
				imgDiscardRight.visible = false;
				imgPlayerRightReady.visible = false;
				btnCardView.visible = false;
				cupAI.visible = false;
				Lable_playernameUp.text = "";
				Label_leftcardsnumUp.text = "";
				Lable_playernameLeft.text = "";
				Label_leftcardsnumLeft.text = "";
				Lable_playernameRight.text = "";
				Label_leftcardsnumRight.text = "";
				Lable_playernameDown.text = "";
				Label_leftcardsnumDown.text = "";
				// 玩家头像和准备图
				avatarUpGroup.visible = false;
				avatarLeftGroup.visible = false;
				avatarDownGroup.visible = false;
				avatarRightGroup.visible = false;
				imgPlayerUpReady.visible = false;
				imgPlayerLeftReady.visible = false;
				imgPlayerRightReady.visible = false;
				imgPlayerDownReady.visible = false;
				// 玩家信息框部分
				playerinfoUp.visible = false;
				playerinfoLeft.visible = false;
				playerinfoDown.visible = false;
				playerinfoRight.visible = false;
				textPlayerSelf.text = "";
				textPlayerSelf_score.text = "";
				textPlayerSelf_level.text = "";
				textPlayerSelf_gold.text = "";
				//
				Lable_playerLevelDown.text = "";
				Lable_playerLevelUp.text = "";
				Lable_playerLevelLeft.text = "";
				Lable_playerLevelRight.text = "";
				//
//				btnTalk.visible = false;
//				btnEmotion.visible = false;
//				btnChatSetting.visible = false;
//				btnShout.visible = false;
//				btnSetting.visible = false;
//				btnExit.visible = false;
//				btnFriends.visible = false;
				//
				label_pl_up_name.text = "";
				label_pl_left_name.text = "";
				label_pl_right_name.text = "";
				label_pl_up_score.text = "";
				label_pl_left_score.text = "";
				label_pl_right_score.text = "";
				label_pl_up_level.text = "";
				label_pl_left_level.text = "";
				label_pl_right_level.text = "";
				label_pl_up_gold.text = "";
				label_pl_left_gold.text = "";
				label_pl_right_gold.text = "";
//				gameplayerlist.visible = false;
				cancelCpu();
			}
			
			public function enterFrame(event:Event):void
			{
				if(!createOver)
					return ;
	    		// 逻辑部分的循环
	    		Game.Instance.taskLoop(currentState);
		    	if (inGame)
		    	{
		    		// 描画部分的循环
//		    		graphics.clear();
//		    		graphics.beginBitmapFill(GameObjectManager.Instance.backBuffer, null, false, false);
//		    		graphics.drawRect(0, 0, this.width, this.height);
//		    		graphics.endFill();
		    	}
			}
			
			public function click(event:MouseEvent):void
			{
				Game.Instance.click(event);
			}
			
			public function mouseDown(even:MouseEvent):void
			{
			
			}
			
			public function mouseUp(event:MouseEvent):void
			{
			
			}
			
			public function mouseMove(event:MouseEvent):void
			{
				
			}
			// 被调用函数
			public function showPopupDlg(data:Object):void
			{
				var popup:GameEndPopup = GameEndPopup(PopUpManager.createPopUp(this, GameEndPopup, true));
				popup.setData(data);
//				popup.visible = false;
			}
			public function showCardViewer(data:Object):void
			{
			}

    		protected function btnHelp_clickHandler(event:MouseEvent):void
    		{
				if(!LobyManager.Instance.windowMutex){
					FlexGlobals.topLevelApplication.friendslist.visible = true;
					FlexGlobals.topLevelApplication.friendslist.toState(1);
					LobyManager.Instance.windowMutex = true;
					StateGetFriends.Instance.settype(1);
					LobyNetManager.Instance.send(LobyNetManager.getFriends);
				}
    		}
    		
    		protected function btnSetting_clickHandler(event:MouseEvent):void
    		{
				if(!LobyManager.Instance.windowMutex){
					if(StateGetTableSettingFromLobby.Instance.lastFlag)
					{
						optionWindow.visible = true;
						optionWindow.inGameSetting(StateGetTableSettingFromLobby.Instance.lastSuccData);
						
						// mutex
						LobyManager.Instance.windowMutex = true;

					}else{
						
					}
				}
    		}
    		
    		protected function btnExit_clickHandler(event:MouseEvent):void
    		{
    			NetManager.Instance.send(NetManager.send_leave);
    		}


    		protected function gameSendMsg_clickHandler(event:MouseEvent):void
    		{
//    			inputEditManager(inputboxGame.textinput.interactionManager).sendButtonPressed();
				Messenger.Instance.sendButtonPressed(gameinputbox);
    		}


    		protected function chatOptionBtn_clickHandler(event:MouseEvent):void
    		{
    			chatsetting.visible = !chatsetting.visible;
    		}

    		protected function shoutgame_clickHandler(event:MouseEvent):void
    		{
				if(!LobyManager.Instance.windowMutex){
					FlexGlobals.topLevelApplication.shoutmsgbox.visible = true;
					LobyManager.Instance.windowMutex = true;
				}
    		}

    		protected function chatEmotion_clickHandler(event:MouseEvent):void
    		{
				gameEmotion.visible = !gameEmotion.visible;
    		}


			protected function gameinputbox_keyDownHandler(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.NUMPAD_ENTER || event.keyCode == Keyboard.ENTER)
				{
					Messenger.Instance.sendButtonPressed(gameinputbox);
					return;
				}
				super.keyDownHandler(event);
			}


			protected function cupAI_clickHandler(event:MouseEvent):void
			{
				if(Game.Instance.isCpuAI)
				{
					cpuAIAnimation.visible = false;
					cupAI.label = "托管";
				}
				else
				{
					cpuAIAnimation.visible = true;
					cupAI.label = "取消托管";

					if(Game.Instance.curPlayer == Game.Instance.selfseat)
					{
						if(Game.Instance.curPlayer == Game.Instance.lastPlayer)
						{
							if(Game.Instance.PlayerCards.length != 0)
							{
								var cards:Array = new Array();
								GameObjectManager.Instance.deselectAllCards();
								cards.push(Game.Instance.PlayerCards[Game.Instance.PlayerCards.length-1])
								GameObjectManager.Instance.selectCards(cards);
								Game.Instance.sendcards();
							}
						}
						else{
							var selcards:Array = GameObjectManager.Instance.showHintCards(StateUpdateWhileGame.Instance.lastSuccData.play.last_card);
							if(selcards.length > 0)	{
								GameObjectManager.Instance.selectCards(selcards[0]);
								Game.Instance.sendcards();
							}
							else{
								Game.Instance.pass();
							}		
						}
					}
				}
				Game.Instance.isCpuAI = !Game.Instance.isCpuAI;
			}
			public function cancelCpu():void
			{
				if(Game.Instance.isCpuAI)
				{
					cpuAIAnimation.visible = false;
					cupAI.label = "托管";
					Game.Instance.isCpuAI = false;
				}
			}


			protected function avatarUpGroup_creationCompleteHandler(event:FlexEvent):void
			{
				var gp:Group = event.currentTarget as Group;
				gp.graphics.beginFill(0x0);
				gp.graphics.drawRect(-2, -2, gp.width+4, gp.height+4);
				gp.graphics.beginFill(0xeeeeee, 1);
				gp.graphics.drawRect(-1, -1, gp.width+2, gp.height+2);
				gp.graphics.endFill();
			}

    	]]>
    </fx:Script>
</mx:Canvas>
