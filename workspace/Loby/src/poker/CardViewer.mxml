<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/halo"
		creationComplete="createComplete()">
	<mx:Image  source="@Embed('assets/cardviewerBG.swf')"/>
	<s:Button x="681" y="4" skinClass="components.OptionWindow_CloseButton" id="button1" click="handleClose(event)"/>
	<s:Label id="playername0" x="286" y="45" color="#FFFFFF"/>
	<s:Label id="playername1" x="54" y="139" color="#FFFFFF"/>
	<s:Label id="playername2" x="286" y="349" color="#FFFFFF"/>
	<s:Label id="playername3" x="563" y="139" color="#FFFFFF"/>
	<fx:Script>
		<![CDATA[
			import mx.controls.Image;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import poker.gamestate.StateItemGetPlayedCards;
			import poker.gamestate.StateUpdateForFirstFrame;

			private var tempAry:Array = new Array();			
			private var carddata:Object;
			
			private function createComplete():void
			{
				//更新自己的位置
				x = 36;
				y = 45;
				// 创建108个image对象，并按照一定的顺序排列在菜单上
				var i:int, j:int =0;
				var img:Image = null;
				for(j=0;j<4;j++)
				{
					for(i=0;i<27; i++)	// 自己
					{
						img = new Image();
						var offx:int,offy:int;
						if(j==0)
						{
							offx = 192;
							offy = 72;
						}
						else if(j==1){
							offx = 25;
							offy = 169;
						}
						else if(j==2){
							offx = 192;
							offy = 264;
						}
						else if(j==3){
							offx = 359;
							offy = 169;
						}
						img.x = offx+i*10;
						img.y = offy;
						img.name = "img"+j+""+i;
						//img.source = ResourceManagerPoker.CardsRes[0];//ResourceManagerPoker.Card06;
						this.addElement(img);
					}
				}
				setCards(StateItemGetPlayedCards.Instance.lastSuccData.history);
				//
				if(StateUpdateForFirstFrame.Instance.lastFlag)
				{
					var playobj:Object = StateUpdateForFirstFrame.Instance.lastSuccData;
					for(var k:int=0;k<4;k++)
					{
						if(playobj.players[k].pos == 0){
							playername0.text = playobj.players[k].name;
						}
						else if(playobj.players[k].pos == 1){
							playername1.text = playobj.players[k].name;
						}
						else if(playobj.players[k].pos == 2){
							playername2.text = playobj.players[k].name;
						}
						else if(playobj.players[k].pos == 3){
							playername3.text = playobj.players[k].name;
						}
					}
				}
			}

			private function handleClose(evt:Event):void
			{
				PopUpManager.removePopUp(this);
			}
			
			public function setCardsData(data:Object):void
			{
				carddata = data;
			}
			
			private function setCards(obj:Object):void
			{
				var cn:Array = [0,0,0,0];
				// 对history数组进行分组归类
				for(var i:int=0; i<obj.length; i++)
				{
					// play: "10,9,8,7,6"
					// pos:	0
					var ary:Array = parseCards(obj[i].play);
					if(ary[0] == "pass" || ary[0] == "null")
						continue;
					for(var j:int=0; j<ary.length; j++)
					{
						var img:Image = Image(this.getChildByName("img"+obj[i].pos+""+cn[obj[i].pos]));
						cn[obj[i].pos] ++;
						var imgRes:Object = ResourceManagerPoker;
						//img.source = GraphicsResource(ResourceManagerPoker.CardsRes[ary[j]]).bitmap.;//imgRes.Card53
						img.source = getCardRes(ary[j]);
					}
					
					
/* 					if(obj[i].pos == 0)
					{
						var img:Image = Image(this.getChildByName("img0"));
						img.load(ResourceManagerPoker.Card03);
					}
					else if(obj[i].pos == 1){
						
					}
					else if(obj[i].pos == 2){
						
					}
					else if(obj[i].pos == 3){
						
					}
 */				}
			}
			
			/*
			* 
			* @param data 
			* 传入的牌的数据的字符，类似于 "10,9,8,7,6"
			* @return
			* 返回一个数组，以int类型存放了牌的值
			*/
			public function parseCards(data:String):Array
			{
				tempAry.length = 0;
				var re:RegExp = /,/;
				tempAry = data.split(re);
				return tempAry;
			}
			
			public function getCardRes(id:int):Object
			{
				switch(id){
					case 0:
						return ResourceManagerPoker.Card02;
					break;
					case 1:
						return ResourceManagerPoker.Card15;
					break;
					case 2:
						return ResourceManagerPoker.Card28;
					break;
					case 3:
						return ResourceManagerPoker.Card41;
					break;
					case 4:
						return ResourceManagerPoker.Card03;
					break;
					case 5:
						return ResourceManagerPoker.Card16;
					break;
					case 6:
						return ResourceManagerPoker.Card29;
					break;
					case 7:
						return ResourceManagerPoker.Card42;
					break;
					case 8:
						return ResourceManagerPoker.Card04;
					break;
					case 9:
						return ResourceManagerPoker.Card17;
					break;
					case 10:
						return ResourceManagerPoker.Card30;
					break;
					case 11:
						return ResourceManagerPoker.Card43;
					break;
					case 12:
						return ResourceManagerPoker.Card05;
					break;
					case 13:
						return ResourceManagerPoker.Card18;
					break;
					case 14:
						return ResourceManagerPoker.Card31;
					break;
					case 15:
						return ResourceManagerPoker.Card44;
					break;
					case 16:
						return ResourceManagerPoker.Card06;
					break;
					case 17:
						return ResourceManagerPoker.Card19;
					break;
					case 18:
						return ResourceManagerPoker.Card32;
					break;
					case 19:
						return ResourceManagerPoker.Card45;
					break;
					case 20:
						return ResourceManagerPoker.Card07;
					break;
					case 21:
						return ResourceManagerPoker.Card20;
					break;
					case 22:
						return ResourceManagerPoker.Card33;
					break;
					case 23:
						return ResourceManagerPoker.Card46;
					break;
					case 24:
						return ResourceManagerPoker.Card08;
					break;
					case 25:
						return ResourceManagerPoker.Card21;
					break;
					case 26:
						return ResourceManagerPoker.Card34;
					break;
					case 27:
						return ResourceManagerPoker.Card47;
					break;
					case 28:
						return ResourceManagerPoker.Card09;
					break;
					case 29:
						return ResourceManagerPoker.Card22;
					break;
					case 30:
						return ResourceManagerPoker.Card35;
					break;
					case 31:
						return ResourceManagerPoker.Card48;
					break;
					case 32:
						return ResourceManagerPoker.Card10;
					break;
					case 33:
						return ResourceManagerPoker.Card23;
					break;
					case 34:
						return ResourceManagerPoker.Card36;
					break;
					case 35:
						return ResourceManagerPoker.Card49;
					break;
					case 36:
						return ResourceManagerPoker.Card11;
					break;
					case 37:
						return ResourceManagerPoker.Card24;
					break;
					case 38:
						return ResourceManagerPoker.Card37;
					break;
					case 39:
						return ResourceManagerPoker.Card50;
					break;
					case 40:
						return ResourceManagerPoker.Card12;
					break;
					case 41:
						return ResourceManagerPoker.Card25;
					break;
					case 42:
						return ResourceManagerPoker.Card38;
					break;
					case 43:
						return ResourceManagerPoker.Card51;
					break;
					case 44:
						return ResourceManagerPoker.Card00;
					break;
					case 45:
						return ResourceManagerPoker.Card13;
					break;
					case 46:
						return ResourceManagerPoker.Card26;
					break;
					case 47:
						return ResourceManagerPoker.Card39;
					break;
					case 48:
						return ResourceManagerPoker.Card01;
					break;
					case 49:
						return ResourceManagerPoker.Card14;
					break;
					case 50:
						return ResourceManagerPoker.Card27;
					break;
					case 51:
						return ResourceManagerPoker.Card40;
					break;
					case 52:
						return ResourceManagerPoker.Card52;
					break;
					case 53:
						return ResourceManagerPoker.Card53;
					break;
				}
				return null;
			}
//			
//			
//			protected function group1_dragEnterHandler(event:DragEvent):void
//			{
//				//				if(event.dragSource.formats[0] == "wnd"){
//				DragManager.acceptDragDrop(this);
//				//				}
//			}
//			
//			
//			protected function group1_dragDropHandler(event:DragEvent):void
//			{
//				//				DragManager.acceptDragDrop(this);
//				this.x = event.stageX;
//				this.y = event.stageY;
//			}
			
		]]>
	</fx:Script>
</s:Group>
