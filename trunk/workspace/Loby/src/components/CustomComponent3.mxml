<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:th="http://ns.adobe.com/thermo/2009"
	xmlns:mx="library://ns.adobe.com/flex/halo"
	xmlns:components="components.*" 
	currentState="State2" 
	creationComplete="group1_creationCompleteHandler(event)">
	<s:BitmapImage source="@Embed('/assets/bg_5.png')" resizeMode="scale" includeIn="State3" id="bitmapimage1"/>
	<s:Button includeIn="State3" x="13" skinClass="components.ButtonMsgEmotion" y="414" click="btnEmotion_clickHandler(event)"/>
	<s:Button includeIn="State3" x="64" y="414" skinClass="components.ButtonMsgToAll"/>
	<s:Button includeIn="State3" x="254" y="436" skinClass="components.Button_GameTalk_say" click="lobbySendMsg(event)"/>
	<mx:DataGrid includeIn="State3" x="13" y="27" width="257" editable="false" height="173" dataProvider="{StateGetRoomPlayerlist.Instance.roomlist}">
		<mx:columns>
			<mx:DataGridColumn headerText="昵称" dataField="name"/>
			<mx:DataGridColumn headerText="金币数" dataField="money"/>
			<mx:DataGridColumn headerText="级别" dataField="level"/>
			<mx:DataGridColumn headerText="积分" dataField="score"/>
		</mx:columns>
	</mx:DataGrid>
	<s:Group id="textshow" includeIn="State3" x="13" y="205" width="241" height="206">
		<s:Button includeIn="State3" x="214" y="184" label="et" click="button1_clickHandler(event)" width="24" height="21"/>
	</s:Group>
	<mx:VScrollBar height="206" x="257" y="199" id="lobbyTextScroll" scroll="scrollListener(event)" includeIn="State3" visible="false"/>
	<mx:ColorPicker includeIn="State3" x="118" y="412" selectedColor="#FFFFFF" change="colorpicker1_changeHandler(event)"/>
	<mx:Label includeIn="State3" x="33" y="414" text="表情" color="#FFFFFF"/>
	<mx:Label includeIn="State3" x="86" y="414" text="喊话" color="#FFFFFF"/>
	<mx:Label x="144" y="414" text="颜色" color="#FFFFFF" includeIn="State3"/>
	<mx:Label x="219" y="414" text="文字大小" color="#FFFFFF" includeIn="State3" width="54" textAlign="left"/>
	<s:NumericStepper includeIn="State3" x="173" y="415" width="46" height="20" minimum="12" maximum="30" 
		color="#000000" id="fontsizeStepper" value="@{inputboxLobby.fontsize}"/>
	<s:transitions>
		<s:Transition fromState="State2" toState="State3" autoReverse="true">
			<s:Parallel>
				<s:Parallel target="{bitmapimage1}">
					<s:Fade duration="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="State3" toState="State2" autoReverse="true">
			<s:Parallel>
				<s:Parallel target="{bitmapimage1}">
					<s:Fade duration="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
	</s:transitions>
	<s:states>
		<s:State name="State2" th:color="0x0081cc"/>
		<s:State name="State3" enterState="state1_enterStateHandler(event)"/>
	</s:states>
	<fx:Script>
		<![CDATA[
			import mx.events.ColorPickerEvent;
			import message.inputEditManager;
			import message.chatEmotion;
			import mx.events.ScrollEvent;
			import flashx.textLayout.events.CompositionCompletionEvent;
			import message.Messenger;
			import mx.events.FlexEvent;
			import mx.core.UIComponent;
			import message.ContentViewer;
			import mx.collections.ArrayCollection;
			import lobystate.StateGetRoomPlayerlist;
			private var ui1:UIComponent = new UIComponent();
			private var ui2:UIComponent = new UIComponent();
			public var inputboxLobby:ContentViewer = new ContentViewer();
			public var showboxLobby:ContentViewer = new ContentViewer();
			// emotion panel
			public var emotion:chatEmotion = new chatEmotion();
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				LobyNetManager.Instance.send(LobyNetManager.leaveTable);
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				// 当窗口创建完�E皁E���
				// 创建对话用皁E���E系统，并封E��E��绑定到主显示窗口�
				Messenger.Instance;	// net part
				ui1.addChild(inputboxLobby.createInputbox(14, 438, 231, 18, 0));	// view part   
				ui2.addChild(showboxLobby.createTextLine(1,0, 256, 207));
				showboxLobby.textcontent.addEventListener(CompositionCompletionEvent.COMPOSITION_COMPLETE, scrollCtrl);
				addElement(emotion);
				emotion.visible = false;
			}

			protected function state1_enterStateHandler(event:FlexEvent):void
			{
				Messenger.Instance.stopGame();
				Messenger.Instance.startLobby();
				this.addElement(ui1);
				textshow.addElement(ui2);
			}
			
			protected function scrollCtrl(event:CompositionCompletionEvent):void
			{
				var textHeight:int = Math.ceil(showboxLobby.controller.getContentBounds().height);
				if (textHeight < showboxLobby.controller.compositionHeight) {
					lobbyTextScroll.enabled = false;
				} else {
					lobbyTextScroll.enabled = true;
					lobbyTextScroll.minScrollPosition = 0;
					lobbyTextScroll.maxScrollPosition = textHeight - showboxLobby.controller.compositionHeight;// maxScrollPosition
					lobbyTextScroll.scrollPosition = lobbyTextScroll.maxScrollPosition; 
				}
				showboxLobby.controller.verticalScrollPosition = showboxLobby.controller.getContentBounds().height;
			}
			protected function scrollListener(event:ScrollEvent):void
			{
				//showboxLobby.textcontent.removeEventListener(flashx.textLayout.events.ScrollEvent.SCROLL, scrollTextFlow);
				showboxLobby.controller.verticalScrollPosition = event.position;
				//showboxLobby.textcontent.addEventListener(flashx.textLayout.events.ScrollEvent.SCROLL, scrollTextFlow);
			}

			protected function btnEmotion_clickHandler(event:MouseEvent):void
			{
				emotion.x = 10;
				emotion.y = 280;
				emotion.visible = !emotion.visible;
			}
			

			protected function lobbySendMsg(event:MouseEvent):void
			{
				inputEditManager(inputboxLobby.textinput.interactionManager).sendButtonPressed();
			}


			protected function colorpicker1_changeHandler(event:ColorPickerEvent):void
			{
				inputboxLobby.changeInputColor(event.color);
			}

		]]>
	</fx:Script>
</s:Group>