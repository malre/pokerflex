<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/halo"
	width="780" height="560"
	creationComplete="creationComplete()" enterFrame="enterFrame(event)"
	click="click(event)" mouseDown="mouseDown(event)" mouseUp="mouseUp(event)" mouseMove="mouseMove(event)" xmlns:components="components.*">

	<!--<mx:Image x="0" y="0" source="@Embed('../res/BG_G_01.jpg')"/>-->
	<mx:Button x="327" y="385" label="出牌" width="65" height="22" id="btnSendCards" icon="@Embed(source='../res/chupai.png')" click="sendCardsClicked(event)"/>
	<mx:Button x="400" y="385" label="放弃" width="65" height="22" id="btnDiscard" icon="@Embed(source='../res/fangqi.png')" click="discardClicked(event)"/>
	<mx:Button x="495" y="385" label="提示" width="65" height="22" id="btnHint" enabled="false"/>

	<s:Button x="284" y="455" skinClass="components.ButtonReady" id="btnReady" click="gameReadyClicked(event)"/>
	<s:Button x="702" y="525" skinClass="components.ButtonMsgEmotion"/>
	<s:Button x="722" y="525" skinClass="components.ButtonMsgOption"/>
	<s:Button x="742" y="525" skinClass="components.ButtonMsgToAll"/>
	<s:Button x="682" y="312" skinClass="components.ButtonSetup" id="btnSetting" click="btnSetting_clickHandler(event)"/>
	<s:Button x="644" y="312" skinClass="components.ButtonHelp" height="44" width="41" click="btnHelp_clickHandler(event)"/>
	<s:Button x="720" y="313" skinClass="components.ButtonExit" click="btnExit_clickHandler(event)"/>

	<mx:Image x="262" y="49" id="label_thinking" source="@Embed('../res/chupaihint.png')"/>
	<mx:Label x="350" y="49" id="Lable_playernameUp" color="#FFFFFF"/>
	<mx:Label x="350" y="74" id="Label_leftcardsnumUp" color="#FFFFFF"/>
	<mx:Image x="266" y="102" id="imgPlayerUpReady" source="@Embed('../res/ready.png')"/>
	<mx:Image x="266" y="102" id="imgPlayerUpPrepare" source="@Embed('../res/notRready.png')"/>
	<mx:Image x="262" y="169" id="imgDiscardUp" source="@Embed('../res/fangqi2.png')" scaleContent="false"/>
	<mx:Image x="139" y="240" id="imgDiscardLeft" source="@Embed('../res/fangqi2.png')" scaleContent="false"/>
	<mx:Image x="72" y="277" id="imgPlayerLeftReady" source="@Embed('../res/ready.png')"/>
	<mx:Image x="72" y="277" id="imgPlayerLeftPrepare" source="@Embed('../res/notRready.png')"/>
	<mx:Image x="262" y="356" id="imgDiscardDown" source="@Embed('../res/fangqi2.png')" scaleContent="false"/>
	<mx:Image x="423" y="240" id="imgDiscardRight" source="@Embed('../res/fangqi2.png')" scaleContent="false"/>
	<mx:Image x="390" y="277" id="imgPlayerRightReady" source="@Embed('../res/ready.png')"/>
	<mx:Image x="390" y="277" id="imgPlayerRightPrepare" source="@Embed('../res/notRready.png')"/>
	<mx:Label x="241" y="277" text="等待其他玩家中..." id="labelWait" color="#FFFFFF"/>
	<mx:Label x="25" y="330" id="Lable_playernameLeft" color="#FFFFFF"/>
	<mx:Label x="25" y="356" id="Label_leftcardsnumLeft" color="#FFFFFF"/>
	<mx:Label x="510" y="330" id="Lable_playernameRight" color="#FFFFFF"/>
	<mx:Label x="510" y="356" id="Label_leftcardsnumRight" color="#FFFFFF"/>
	<mx:Button x="10" y="524" label="显示出过的牌" id="btnCardView" click="requestCardHistory()" enabled="true" visible="false"/>
	<mx:Label x="705" y="60" id="textPlayerSelf" width="76" height="24" color="#FFFFFF"/>
	<mx:Label x="650" y="186" id="textPlayerPartner" width="90" height="19" color="#FFFFFF"/>
	<mx:Label x="650" y="206" id="textPlayerEmy1" width="90" height="19" color="#FFFFFF"/>
	<mx:Label x="650" y="226" id="textPlayerEmy2" width="90" height="19" color="#FFFFFF"/>
	<mx:Label x="260" y="77" text="Label" width="45" fontWeight="bold" textAlign="left" id="label_leftTimeCounter" color="#FFFFFF"/>
	<s:Group x="578" y="386" width="182" height="137">
	</s:Group>
    
    <fx:Script>
    	<![CDATA[
    		import message.ContentViewer;
    		import mx.core.UIComponent;
    		import mx.rpc.events.ResultEvent;
    		import mx.rpc.events.FaultEvent;
    		import mx.managers.PopUpManager;
    		import mx.controls.Alert;
			protected var inGame:Boolean = false;
			private var ui1:UIComponent = new UIComponent();
			private var ui2:UIComponent = new UIComponent();
			public var inputboxGame:ContentViewer = new ContentViewer();
			public var showboxGame:ContentViewer = new ContentViewer();

			private function enterGame(event:Event):void
			{
				//Game.Instance.init();
				inGame = true;
				//
				Label_leftcardsnumRight.visible = false;
				Label_leftcardsnumUp.visible = false;
				Label_leftcardsnumLeft.visible = false;
				// 放弃图
				imgDiscardDown.visible = false;
				imgDiscardLeft.visible = false;
				imgDiscardUp.visible = false;
				imgDiscardRight.visible = false;
				//
				label_thinking.visible = false;
			}
			
			private function exitGame(event:Event):void
			{
				GameObjectManager.Instance.shutdown();
				inGame = false;
				// 
				Label_leftcardsnumRight.visible = false;
				Label_leftcardsnumUp.visible = false;
				Label_leftcardsnumLeft.visible = false;
			}
			
			private function requestCardHistory():void
			{
				NetManager.Instance.send(NetManager.send_itemGetPlayedCards);
			}
			private function startDebugClicked(event:Event):void
			{
				var popup:CardViewer = CardViewer(PopUpManager.createPopUp(this, CardViewer, true));
				// 增加一个键盘监听事件
				//this.addEventListener(KeyboardEvent.KEY_DOWN, keydown);
				
			}
			private function keydown(evt:KeyboardEvent):void
			{

			}

			// 准备界面时，准备完成点击用按钮
			private function gameReadyClicked(event:Event):void
			{
				// 发送准备好的消息，如果失败，将会自动重发，
				NetManager.Instance.send(NetManager.send_iamReady);
				btnReady.enabled = false;
			}
			
			private function sendCardsClicked(event:Event):void
			{
				btnSendCards.enabled = false;
				// 发送出牌的消息，如果失败，将会自动重发，
				Game.Instance.sendcards();
			}

			private function discardClicked(event:Event):void
			{
				btnDiscard.enabled = false;
				Game.Instance.pass();
			}
			
			private function btnContinueClicked(event:Event):void
			{
			}

			//public var loadedSM:SystemManager;
			public function creationComplete():void
			{
				ui1.addChild(inputboxGame.createInputbox(580, 520, 182, 20, 1));	// view part   
				ui2.addChild(showboxGame.createTextLine(580, 388, 182, 137));
				//showboxGame.textcontent.addEventListener(CompositionCompletionEvent.COMPOSITION_COMPLETE, scrollCtrl);

			}
			public function startup(obj:Object):void
			{
				this.visible = true;
				this.addElement(ui1);
				this.addElement(ui2);
				// 把得到的返回数据复制给本游戏的处理返回的result对象
				NetManager.Instance.json1 = obj;
				NetManager.Instance.requestSuccess = true;
				Game.Instance.getSelfseat(obj);
				//
				Label_leftcardsnumRight.visible = false;
				Label_leftcardsnumUp.visible = false;
				Label_leftcardsnumLeft.visible = false;
				// 放弃图
				imgDiscardDown.visible = false;
				imgDiscardLeft.visible = false;
				imgDiscardUp.visible = false;
				imgDiscardRight.visible = false;
				//
				label_thinking.visible = false;
				label_leftTimeCounter.visible = false;
				inGame = true;
				Game.Instance.gameState = 3;	// 3 发送举手消息以前
				// 关闭几个和出牌有关的按钮的显示
				btnReady.visible = true;
				btnReady.enabled = true;
				btnSendCards.visible = false;
				btnDiscard.visible = false;
				btnHint.visible = false;
				// 初始化玩家的准备用按钮
				Game.Instance.readyStateInit();
				// “等待其他玩家” 该信息不显示
				labelWait.visible = false;
				//把http的处理函数定义到自己的函数来
				// 我使用了移除函数，并且我认为没有错误，但是实际的效果是，前一个监听器并没有被移除
				//LobyNetManager.Instance.httpservice.removeEventListener(ResultEvent.RESULT, LobyNetManager.Instance.httpResult);
				//LobyNetManager.Instance.httpservice.removeEventListener(FaultEvent.FAULT, LobyNetManager.Instance.httpFault);
				
				//LobyNetManager.Instance.httpservice.addEventListener(ResultEvent.RESULT, NetManager.Instance.resultProcess);
				//LobyNetManager.Instance.httpservice.addEventListener(FaultEvent.FAULT, NetManager.Instance.failProcess);			
			}
			public function endup():void
			{
				this.visible = false;
				//
				Label_leftcardsnumRight.visible = false;
				Label_leftcardsnumUp.visible = false;
				Label_leftcardsnumLeft.visible = false;
				// 放弃图
				imgDiscardDown.visible = false;
				imgDiscardLeft.visible = false;
				imgDiscardUp.visible = false;
				imgDiscardRight.visible = false;
				//
				label_thinking.visible = false;
				label_leftTimeCounter.visible = false;
				inGame = false;
				Game.Instance.gameState = 0;	// null
				// 关闭几个和出牌有关的按钮的显示
				btnReady.visible = true;
				btnReady.enabled = true;
				btnSendCards.visible = false;
				btnDiscard.visible = false;
				btnHint.visible = false;
				// 初始化玩家的准备用按钮
				Game.Instance.readyStateInit();
				// “等待其他玩家” 该信息不显示
				labelWait.visible = false;				
				GameObjectManager.Instance.shutdown();
				// 背景还是要保留
				GameObjectManager.Instance.setVisibleByName("BG", true);
				Game.Instance.clearPlayerCards();
			}
			public function initGUI():void
			{
				btnSendCards.visible = false;
				btnDiscard.visible = false;
				btnHint.visible = false;
				btnReady.visible = false;
				label_thinking.visible = false;
				label_leftTimeCounter.visible = false;
				imgPlayerUpReady.visible = false;
				imgPlayerUpPrepare.visible = false;
				imgDiscardUp.visible = false;
				imgDiscardLeft.visible = false;
				imgPlayerLeftReady.visible = false;
				imgPlayerLeftPrepare.visible = false;
				imgDiscardDown.visible = false;
				imgDiscardRight.visible = false;
				imgPlayerRightReady.visible = false;
				imgPlayerRightPrepare.visible = false;
				labelWait.visible = false;
				btnCardView.visible = false;
				Lable_playernameUp.text = "";
				Label_leftcardsnumUp.text = "";
				Lable_playernameLeft.text = "";
				Label_leftcardsnumLeft.text = "";
				Lable_playernameRight.text = "";
				Label_leftcardsnumRight.text = "";
				textPlayerSelf.text = "";
				textPlayerPartner.text = "";
				textPlayerEmy1.text = "";
				textPlayerEmy2.text = "";
			}
			
			public function enterFrame(event:Event):void
			{
	    		// 逻辑部分的循环
	    		Game.Instance.taskLoop(currentState);
		    	if (inGame)
		    	{
		    		// 描画部分的循环
		    		graphics.clear();
		    		graphics.beginBitmapFill(GameObjectManager.Instance.backBuffer, null, false, false);
		    		graphics.drawRect(0, 0, this.width, this.height);
		    		graphics.endFill();
		    	}
			}
			
			public function click(event:MouseEvent):void
			{
				Game.Instance.click(event);
			}
			
			public function mouseDown(even:MouseEvent):void
			{
			
			}
			
			public function mouseUp(event:MouseEvent):void
			{
			
			}
			
			public function mouseMove(event:MouseEvent):void
			{
				
			}
			// 被调用函数
			public function showPopupDlg(data:Object):void
			{
				var popup:GameEndPopup = GameEndPopup(PopUpManager.createPopUp(this, GameEndPopup, true));
				popup.setData(data);
				popup.visible = false;
			}
			public function showCardViewer(data:Object):void
			{
			}

    		protected function btnHelp_clickHandler(event:MouseEvent):void
    		{
    		}
    		
    		protected function btnSetting_clickHandler(event:MouseEvent):void
    		{
    		}
    		
    		protected function btnExit_clickHandler(event:MouseEvent):void
    		{
    			NetManager.Instance.send(NetManager.send_leave);
    		}

    	]]>
    </fx:Script>
</mx:Canvas>
