<?xml version="1.0" encoding="utf-8"?>
<s:Application 
        xmlns:fx="http://ns.adobe.com/mxml/2009" 
        xmlns:d="http://ns.adobe.com/fxg/2008/dt"
        xmlns:s="library://ns.adobe.com/flex/spark" 
        xmlns:th="http://ns.adobe.com/thermo/2009" 
        xmlns:mx="library://ns.adobe.com/flex/halo" 
        xmlns:message="message.*"
        xmlns:components="components.*"
        width="780" height="560" backgroundColor="#ffffff" 
        creationComplete="createcomplete(event)" enterFrame="enterframe(event)" 
        xmlns:poker="poker.*"
		preloader="GameLoadingbar">
	<fx:Script>
		<![CDATA[
			import item.playerItemsRequester;
			import item.shopRequester;
			
			import lobystate.StateGetFriends;
			import lobystate.StateGetPlayerInfo;
			
			import spark.utils.TextFlowUtil;
			
			protected function Buttonitem_click():void
			{
				if(!LobyManager.Instance.windowMutex){
					// 等用户未登录的情况下，这些选项都无效
					if(StateGetPlayerInfo.Instance.lastSuccData.hasOwnProperty("success"))
					{
						if(StateGetPlayerInfo.Instance.lastSuccData.success)
						{
							shopmenu.visible = true;
							shopmenu.currentState="StateItemMain";
							// 进行一次道具列表的请求, 该次请求是初始请求，范围在0-12内
							playerItemsRequester.Instance().setRequest(0, 13);
							playerItemsRequester.Instance().send();
							//
							LobyManager.Instance.windowMutex = true;
						}
					}
				}
			}

			protected function Buttonvita_click():void
			{
				if(!LobyManager.Instance.windowMutex){
					// 等用户未登录的情况下，这些选项都无效
					if(StateGetPlayerInfo.Instance.lastSuccData.hasOwnProperty("success"))
					{
						if(StateGetPlayerInfo.Instance.lastSuccData.success)
						{
							playerinfo.visible = true;
							playerinfo.currentState="StateMain";
							LobyManager.Instance.windowMutex = true;
						}
					}
				}
			}

			protected function Buttonfriend_click():void
			{
				if(!LobyManager.Instance.windowMutex){
					// 等用户未登录的情况下，这些选项都无效
					if(StateGetPlayerInfo.Instance.lastFlag)
					{
						friendslist.visible = true;
						if(StateGetFriends.Instance.friends != null)
						{
							if(StateGetFriends.Instance.friends.length != 0)
							{
								friendslist.toState(2);
								LobyManager.Instance.windowMutex = true;
							}
							else{
								friendslist.toState(1);
								LobyManager.Instance.windowMutex = true;
								StateGetFriends.Instance.settype(0);
								LobyNetManager.Instance.send(LobyNetManager.getFriends);
							}
						}else{
							friendslist.toState(1);
							LobyManager.Instance.windowMutex = true;
							StateGetFriends.Instance.settype(0);
							LobyNetManager.Instance.send(LobyNetManager.getFriends);
						}
					}
				}
			}

			protected function Buttonshop_click():void
			{
				if(!LobyManager.Instance.windowMutex){
					// 等用户未登录的情况下，这些选项都无效
					if(StateGetPlayerInfo.Instance.lastSuccData.hasOwnProperty("success"))
					{
						if(StateGetPlayerInfo.Instance.lastSuccData.success)
						{
							shopmenu.visible = true;
							shopmenu.currentState="StateShopMain";
							// 进行一次道具列表的请求, 该次请求是初始请求，范围在0-12内
							shopRequester.Instance().setRequest(0, 13);
							shopRequester.Instance().send();
							LobyManager.Instance.windowMutex = true;
						}
					}
				}
			}

			protected function createcomplete(event:Event):void
			{
//				// 修改tooltip的式样
//				StyleManager.getStyleDeclaration("ToolTip").setStyle("fontSize",18);   
////				StyleManager.getStyleDeclaration("ToolTip").setStyle("backgroundColor","#33CC99");  
				
				// 大厅置成正常状态
				LobyManager.Instance.state = 0;
				// 发送更新大厅列表
				LobyNetManager.Instance.send(LobyNetManager.roomInfo);
				
				// 开始播放背景音乐
//				SoundManager.Instance().seturl(SoundManager.Instance().mp3url);
//				SoundManager.Instance().play();
			}
			
			protected function enterframe(event:Event):void
			{
				LobyManager.Instance.enterFrame();
			}

			protected function BtnAutojoinTable_clickHandler(event:MouseEvent):void
			{
				if(!LobyManager.Instance.windowMutex){
					LobyNetManager.Instance.send(LobyNetManager.autoaddlobby);
				}
			}

			protected function BtnCreateTable_clickHandler(event:MouseEvent):void
			{
				if(!LobyManager.Instance.windowMutex){
					createTable.visible = true;
					createTable.setLobbyGoldrate();
					createTable.currentState = "State2";
					LobyManager.Instance.windowMutex = true;
				}
			}

		]]>
	</fx:Script>
	<s:states>
		<s:State name="Page1" th:color="0xcc0000"/>
	</s:states>
	<fx:Style>
		@namespace d "http://ns.adobe.com/fxg/2008/dt";
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace th "http://ns.adobe.com/thermo/2009";
		@namespace mx "library://ns.adobe.com/flex/halo";
		@namespace message "message.*";
		@namespace components "components.*";
		@namespace poker "poker.*";
		mx|ToolTip{
			fontSize: 14;
		}
	</fx:Style>
	<fx:DesignLayer d:userLabel="bgp">
		<s:BitmapImage source="@Embed('/assets/BG_D_3.png')" resizeMode="scale" d:userLabel="BgP"/>
		<components:CustomComponent3 x="497" y="94" id="customcomponent31" d:userLabel="player_information&amp;chat_window">
		</components:CustomComponent3>
		<mx:Image x="36" y="38" id="imgAvatar" autoLoad="true"  scaleContent="true" maintainAspectRatio="true" width="53" height="52"/>
		<mx:Label x="82" y="31" id="textPlayname" height="17" width="69" fontWeight="bold" fontStyle="normal" textDecoration="none"/>
		<s:TextArea x="289" y="117" id="introduceText" width="474" height="435" editable="false" color="0xffffff" baseColor="#11241A" contentBackgroundAlpha="0"
					textFlow="{TextFlowUtil.importFromString(ruleIntroduce.ruleText)}">
		</s:TextArea>
	</fx:DesignLayer>
	<mx:Canvas x="17" y="116" width="480" height="436" id="gameRoomCanvas" baseColor="#f6edae">
	</mx:Canvas>
	<components:lobbyroomTagbtn id="lobbyroomtag" x="15" y="95" visible="false">
	</components:lobbyroomTagbtn>
	<fx:DesignLayer d:userLabel="button">
		<s:Button x="201" y="54" skinClass="components.Button_friend" d:userLabel="Button friend" click="Buttonfriend_click()" toolTip="好友"/>
		<s:Button x="103" y="56" skinClass="components.Button_Item" d:userLabel="Button item" click="Buttonitem_click()" toolTip="道具箱"/>
		<s:Button x="153" y="53" skinClass="components.Button_Vita" d:userLabel="Button vita" click="Buttonvita_click()" toolTip="个人信息"/>
		<s:Button x="290" y="26" skinClass="components.Button_Shop" d:userLabel="Button shop" click="Buttonshop_click()"/>
		<s:Button x="361" y="29" label="自动加入" skinClass="components.Button_AutoJoinTable" id="BtnAutojoinTable" click="BtnAutojoinTable_clickHandler(event)" visible="false"/>
		<s:Button x="429" y="29" label="创建房间" skinClass="components.Button_CreateTable" id="BtnCreateTable" click="BtnCreateTable_clickHandler(event)" visible="false"/>
	</fx:DesignLayer>
	<fx:DesignLayer d:userLabel="game lest">
		<components:GameLbby x="5" y="93" id="customcomponent21" d:userLabel="Game lbby">
		<mx:Tree x="13" y="53" width="256" height="400" id="gameTreeView" doubleClickEnabled="true" itemDoubleClick="{LobyManager.Instance.LobyTreeItemClick(event)}" folderOpenIcon="@Embed(source='../res/treeroomiconOpen.png')" folderClosedIcon="@Embed(source='../res/treeroomiconClose.png')" defaultLeafIcon="@Embed(source='../res/treeroomiconNode.png')"
			alternatingItemColors="[#11241A, #11241A]" color="#ffffff"/>
		</components:GameLbby>
	</fx:DesignLayer>
	<fx:DesignLayer d:userLabel="massage" th:visible.Page2="false">
		<!--商店界面同时也是道具界面-->
		<components:Shop x="200" y="130" id="shopmenu">
		</components:Shop>
		<!--玩家信息-->
		<components:PlayerInfo x="200" y="130" id="playerinfo"/>
		<components:OptionWindow x="200" y="130" id="createTable" visible="false"/>
		<components:passwordInput id="pwInput" x="188" y="230" visible="false"/>
	</fx:DesignLayer>
	<mx:Label x="620" y="6" text="ver 1.7.9.A" width="64" textAlign="right" color="#FFFFFF"/>
	<!--游戏本体-->
	<poker:poker id="gamePoker" visible="false"/>
	<!--用来确认一些需要使用卡片的道具-->
	<components:shoutMsgInputBox id="shoutmsgbox" x="250" y="200" visible="false"/>
	<!--好友列表，大厅和游戏共用同一个-->
	<components:friends id="friendslist" x="200" y="130" visible="false"/>
	<!--公告显示的位置，处在画面的最上层-->
	<message:announceWnd id="lobbyAnnounce" x="50" y="66" visible="false"/>
</s:Application>
